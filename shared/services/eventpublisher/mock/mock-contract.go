// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mock_eventpublisher is a generated GoMock package.
package mock_eventpublisher

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	eventpublisher "github.com/sepisoad/robot-challange/shared/services/eventpublisher"
)

// MockEventPublisherInterface is a mock of EventPublisherInterface interface.
type MockEventPublisherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEventPublisherInterfaceMockRecorder
}

// MockEventPublisherInterfaceMockRecorder is the mock recorder for MockEventPublisherInterface.
type MockEventPublisherInterfaceMockRecorder struct {
	mock *MockEventPublisherInterface
}

// NewMockEventPublisherInterface creates a new mock instance.
func NewMockEventPublisherInterface(ctrl *gomock.Controller) *MockEventPublisherInterface {
	mock := &MockEventPublisherInterface{ctrl: ctrl}
	mock.recorder = &MockEventPublisherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventPublisherInterface) EXPECT() *MockEventPublisherInterfaceMockRecorder {
	return m.recorder
}

// PublishRobotEvent mocks base method.
func (m *MockEventPublisherInterface) PublishRobotEvent(event eventpublisher.RobotEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRobotEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishRobotEvent indicates an expected call of PublishRobotEvent.
func (mr *MockEventPublisherInterfaceMockRecorder) PublishRobotEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRobotEvent", reflect.TypeOf((*MockEventPublisherInterface)(nil).PublishRobotEvent), event)
}

// PublishTaskEvent mocks base method.
func (m *MockEventPublisherInterface) PublishTaskEvent(event eventpublisher.TaskEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTaskEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTaskEvent indicates an expected call of PublishTaskEvent.
func (mr *MockEventPublisherInterfaceMockRecorder) PublishTaskEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTaskEvent", reflect.TypeOf((*MockEventPublisherInterface)(nil).PublishTaskEvent), event)
}
