// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mock_idgenerator is a generated GoMock package.
package mock_idgenerator

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIdGeneratorInterface is a mock of IdGeneratorInterface interface.
type MockIdGeneratorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIdGeneratorInterfaceMockRecorder
}

// MockIdGeneratorInterfaceMockRecorder is the mock recorder for MockIdGeneratorInterface.
type MockIdGeneratorInterfaceMockRecorder struct {
	mock *MockIdGeneratorInterface
}

// NewMockIdGeneratorInterface creates a new mock instance.
func NewMockIdGeneratorInterface(ctrl *gomock.Controller) *MockIdGeneratorInterface {
	mock := &MockIdGeneratorInterface{ctrl: ctrl}
	mock.recorder = &MockIdGeneratorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdGeneratorInterface) EXPECT() *MockIdGeneratorInterfaceMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockIdGeneratorInterface) Generate() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockIdGeneratorInterfaceMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockIdGeneratorInterface)(nil).Generate))
}
