// Package robotapiserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package robotapiserver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for MoveRobotRequestMoveSequences.
const (
	E MoveRobotRequestMoveSequences = "E"
	N MoveRobotRequestMoveSequences = "N"
	S MoveRobotRequestMoveSequences = "S"
	W MoveRobotRequestMoveSequences = "W"
)

// Defines values for TaskStatus.
const (
	CANCELLED  TaskStatus = "CANCELLED"
	COMPLETED  TaskStatus = "COMPLETED"
	CREATED    TaskStatus = "CREATED"
	INPROGRESS TaskStatus = "INPROGRESS"
)

// Error defines model for error.
type Error struct {
	// Error code
	Code int `json:"code"`

	// Error message
	Message string `json:"message"`
}

// MoveRobotRequest defines model for moveRobotRequest.
type MoveRobotRequest struct {
	MoveSequences []MoveRobotRequestMoveSequences `json:"moveSequences"`
}

// MoveRobotRequestMoveSequences defines model for MoveRobotRequest.MoveSequences.
type MoveRobotRequestMoveSequences string

// MoveRobotResponse defines model for moveRobotResponse.
type MoveRobotResponse struct {
	Task Task `json:"task"`
}

// Robot defines model for robot.
type Robot struct {
	Id        int `json:"id"`
	XPosition int `json:"xPosition"`
	YPosition int `json:"yPosition"`
}

// Task defines model for task.
type Task struct {
	Id     int        `json:"id"`
	Status TaskStatus `json:"status"`
}

// TaskStatus defines model for Task.Status.
type TaskStatus string

// RobotId defines model for robotId.
type RobotId = int

// TaskId defines model for taskId.
type TaskId = int

// MoveRobotJSONBody defines parameters for MoveRobot.
type MoveRobotJSONBody = MoveRobotRequest

// MoveRobotJSONRequestBody defines body for MoveRobot for application/json ContentType.
type MoveRobotJSONRequestBody = MoveRobotJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a web dashboard
	// (GET /)
	Dashboard(ctx echo.Context) error
	// Return the list of all robots with their current status
	// (GET /api/robots)
	GetAllRobots(ctx echo.Context) error
	// Get robot
	// (GET /api/robots/{robotId})
	GetRobot(ctx echo.Context, robotId RobotId) error
	// Move robot
	// (PUT /api/robots/{robotId})
	MoveRobot(ctx echo.Context, robotId RobotId) error
	// Get all tasks
	// (GET /api/tasks)
	GetAllTasks(ctx echo.Context) error
	// Cancel task
	// (DELETE /api/tasks/{taskId})
	CancelTask(ctx echo.Context, taskId TaskId) error
	// Get task
	// (GET /api/tasks/{taskId})
	GetTask(ctx echo.Context, taskId TaskId) error
	// Returns a websocket that streams the robots status
	// (GET /ws/robots)
	RobotsWebsocket(ctx echo.Context) error
	// Returns a websocket streams the current running tasks
	// (GET /ws/tasks)
	TasksWebsocket(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Dashboard converts echo context to params.
func (w *ServerInterfaceWrapper) Dashboard(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Dashboard(ctx)
	return err
}

// GetAllRobots converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllRobots(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllRobots(ctx)
	return err
}

// GetRobot converts echo context to params.
func (w *ServerInterfaceWrapper) GetRobot(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "robotId" -------------
	var robotId RobotId

	err = runtime.BindStyledParameterWithLocation("simple", false, "robotId", runtime.ParamLocationPath, ctx.Param("robotId"), &robotId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter robotId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRobot(ctx, robotId)
	return err
}

// MoveRobot converts echo context to params.
func (w *ServerInterfaceWrapper) MoveRobot(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "robotId" -------------
	var robotId RobotId

	err = runtime.BindStyledParameterWithLocation("simple", false, "robotId", runtime.ParamLocationPath, ctx.Param("robotId"), &robotId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter robotId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MoveRobot(ctx, robotId)
	return err
}

// GetAllTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllTasks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllTasks(ctx)
	return err
}

// CancelTask converts echo context to params.
func (w *ServerInterfaceWrapper) CancelTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId TaskId

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, ctx.Param("taskId"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CancelTask(ctx, taskId)
	return err
}

// GetTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId TaskId

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, ctx.Param("taskId"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTask(ctx, taskId)
	return err
}

// RobotsWebsocket converts echo context to params.
func (w *ServerInterfaceWrapper) RobotsWebsocket(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RobotsWebsocket(ctx)
	return err
}

// TasksWebsocket converts echo context to params.
func (w *ServerInterfaceWrapper) TasksWebsocket(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TasksWebsocket(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Dashboard)
	router.GET(baseURL+"/api/robots", wrapper.GetAllRobots)
	router.GET(baseURL+"/api/robots/:robotId", wrapper.GetRobot)
	router.PUT(baseURL+"/api/robots/:robotId", wrapper.MoveRobot)
	router.GET(baseURL+"/api/tasks", wrapper.GetAllTasks)
	router.DELETE(baseURL+"/api/tasks/:taskId", wrapper.CancelTask)
	router.GET(baseURL+"/api/tasks/:taskId", wrapper.GetTask)
	router.GET(baseURL+"/ws/robots", wrapper.RobotsWebsocket)
	router.GET(baseURL+"/ws/tasks", wrapper.TasksWebsocket)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYS2/bOBD+K8TsHoXI22YvvnkdITCQuoYdoIciB1oa22wlUiFHyRqB/vuCpB6OJT+y",
	"TRcGtpfE1gw538x885BfIFZZriRKMjB8gZxrniGhdt+0WiqaJPZjgibWIiehJAzhfoPMCVkhxWOBTCQo",
	"SawEaghAWJWc0wYCkDxDGDY3BaDxsRAaExiSLjAAE28w49YEbXOrKiThGjWUZQDEzfdD9q3sXPPVPW+y",
	"XtZSFwrUWmkXIa1y1CTQPY5Vgl14kVVmThZ0Lg4gQ2P4+uC5WtwcNaSFXLuAtPi/QnV/rf7Q6KvlN4zJ",
	"WVJPOLehn+NjgYa6DliNhRXK2D8QhJn3WBaZNTOFABYQQAQBfNmxUqNqHnCt+baD8rWBEyBNrqTBLkqb",
	"P/v/d40rGMJvYcvasEpS6HT2rbuHfUYdIbuGRNLHhQD+nikjfJb6xNtj4j1IwvKwvW/3cB/Q2vXzcBri",
	"VLxK33geje6jGwhgMp3NP9/Oo4XN5vjzp9ld5AXj0XQc3d1FNz3Z7QNfGemitdpCrpTDJii1MpdZNppN",
	"IIAn1MYzfXA1uPrDAlY5Sp4LGMLHq8HVRwhc5ToPQvtnjS5L1nduY2S7Adxws1kqrn1Fe9K4Ix8Gg25V",
	"zZEKLQ3j7BmXLGnOugovsozr7QmtkOcidIwxBzHdIo3SdO6V+mHFShJKd5bneSpidzr8Zjxv2l7U1OAx",
	"vnsGd8uvDPb9d5hYgsRFauyJP9+I5xgM3xh7zE4koZY8ZQvUT6hZVCl2g85ogywVhphaMZ6mfrQY9ixo",
	"Y2VCs7jQGiWxinp7SQlfqvlSHkuPi4MjWDvjvvY716qE9eQqH34wqWfk8kDudlN3Pbj++ambKmIrVcjk",
	"oshyi8Qa0udFT5I/1ZPkB7PsZuVfKtm+m+OdQVy+7qx2Gyk7BPvwM+xXM7YnCTZ8zDOuVftfU85FpC7O",
	"quXYgXxqDNw7nf9iCvit5/QQcIgucgbYsrZN38f1dZjDF7+5l36qp0jYDfmYyxhdyN9c9tV7QU9vv+7u",
	"EVPF6mhdUvy8+6wmwiFWvnN83s/5am/vZeyvydeUSPN6Ez6bU7uo3/i+4NKo+DvSWVvyWCMnNHb7rU61",
	"Efi3i121Tfv7GG24XeA08sy4la9a83Z3umdzor+6PnZpnu06VW+qupBSyHXT1tyr3NpXXd+ON5pN2CLH",
	"uP3Rwm8y5UP5TwAAAP//UBqFT6URAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
